/**
 * This file is generated by the Taxi compiler.
 * Do not edit this file manually.
 */
import { DatatypeContainer, DatatypeName } from '@orbitalhq/orbital-client';

function buildDatatypeContainer<V>(name: DatatypeName, value: V): DatatypeContainer<V> {
  return { name, value };
}

export namespace taxi.http {
  export type HttpMethodType = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';
  export type HttpMethod = DatatypeContainer<HttpMethodType | null>;
  export class Taxonomy {
    readonly HttpMethod: HttpMethod = buildDatatypeContainer('taxi.http.HttpMethod', null);
  }
}

export namespace com.orbitalhq {
  export type UsernameType = string;
  export type Username = DatatypeContainer<UsernameType>;

  export class Taxonomy {
    readonly Username: Username = buildDatatypeContainer('com.orbitalhq.Username', '');
  }
}

export namespace com.orbitalhq.auth {
  export type AuthClaimsType = any;
  export type AuthClaims = DatatypeContainer<AuthClaimsType>;

  export class Taxonomy {
    readonly AuthClaims: AuthClaims = buildDatatypeContainer('com.orbitalhq.auth.AuthClaims', '');
  }
}

export namespace com.orbitalhq.errors {
  export type ErrorMessageType = string;
  export type ErrorMessage = DatatypeContainer<ErrorMessageType>;
  export type ErrorType = any;
  export type Error = DatatypeContainer<ErrorType>;
  export type NotAuthorizedError = DatatypeContainer<{
    readonly message: com.orbitalhq.errors.ErrorMessageType;
  }>;

  export class Taxonomy {
    readonly ErrorMessage: ErrorMessage = buildDatatypeContainer(
      'com.orbitalhq.errors.ErrorMessage',
      ''
    );
    readonly Error: Error = buildDatatypeContainer('com.orbitalhq.errors.Error', '');
    readonly NotAuthorizedError: NotAuthorizedError = buildDatatypeContainer(
      'com.orbitalhq.errors.NotAuthorizedError',
      {
        message: '',
      }
    );
  }
}

export namespace com.orbitalhq.jdbc {
  export type ConnectionNameType = string;
  export type ConnectionName = DatatypeContainer<ConnectionNameType>;
  export type TableNameType = string;
  export type TableName = DatatypeContainer<TableNameType>;
  export type SchemaNameType = string;
  export type SchemaName = DatatypeContainer<SchemaNameType>;

  export class Taxonomy {
    readonly ConnectionName: ConnectionName = buildDatatypeContainer(
      'com.orbitalhq.jdbc.ConnectionName',
      ''
    );
    readonly TableName: TableName = buildDatatypeContainer('com.orbitalhq.jdbc.TableName', '');
    readonly SchemaName: SchemaName = buildDatatypeContainer('com.orbitalhq.jdbc.SchemaName', '');
  }
}

export namespace vyne.vyneQl {
  export type VyneQlQueryType = string;
  export type VyneQlQuery = DatatypeContainer<VyneQlQueryType>;

  export class Taxonomy {
    readonly VyneQlQuery: VyneQlQuery = buildDatatypeContainer('vyne.vyneQl.VyneQlQuery', '');
  }
}

export namespace com.orbitalhq.kafka {
  export type ConnectionNameType = string;
  export type ConnectionName = DatatypeContainer<ConnectionNameType>;
  export type TopicNameType = string;
  export type TopicName = DatatypeContainer<TopicNameType>;

  export type TopicOffsetType = 'earliest' | 'latest' | 'none';
  export type TopicOffset = DatatypeContainer<TopicOffsetType | null>;
  export type KafkaMetadataTypeType =
    | 'Partition'
    | 'Offset'
    | 'Timestamp'
    | 'TimestampType'
    | 'Topic';
  export type KafkaMetadataType = DatatypeContainer<KafkaMetadataTypeType | null>;
  export class Taxonomy {
    readonly ConnectionName: ConnectionName = buildDatatypeContainer(
      'com.orbitalhq.kafka.ConnectionName',
      ''
    );
    readonly TopicName: TopicName = buildDatatypeContainer('com.orbitalhq.kafka.TopicName', '');

    readonly TopicOffset: TopicOffset = buildDatatypeContainer(
      'com.orbitalhq.kafka.TopicOffset',
      null
    );
    readonly KafkaMetadataType: KafkaMetadataType = buildDatatypeContainer(
      'com.orbitalhq.kafka.KafkaMetadataType',
      null
    );
  }
}

export namespace com.orbitalhq.catalog {
  export class Taxonomy {}
}

export namespace com.orbitalhq.aws.s3 {
  export type S3EntryKeyType = string;
  export type S3EntryKey = DatatypeContainer<S3EntryKeyType>;
  // A pattern (using standard Glob format) that defines
  //   the file(s) to read from S3. Eg:
  //    - `foo*.txt`
  //    - `*.txt`
  //    - `*`
  export type FilenamePatternType = string;
  export type FilenamePattern = DatatypeContainer<FilenamePatternType>;
  export type ConnectionNameType = string;
  export type ConnectionName = DatatypeContainer<ConnectionNameType>;
  export type BucketNameType = string;
  export type BucketName = DatatypeContainer<BucketNameType>;

  export class Taxonomy {
    readonly S3EntryKey: S3EntryKey = buildDatatypeContainer('com.orbitalhq.aws.s3.S3EntryKey', '');
    readonly FilenamePattern: FilenamePattern = buildDatatypeContainer(
      'com.orbitalhq.aws.s3.FilenamePattern',
      ''
    );
    readonly ConnectionName: ConnectionName = buildDatatypeContainer(
      'com.orbitalhq.aws.s3.ConnectionName',
      ''
    );
    readonly BucketName: BucketName = buildDatatypeContainer('com.orbitalhq.aws.s3.BucketName', '');
  }
}

export namespace com.orbitalhq.aws.sqs {
  export type ConnectionNameType = string;
  export type ConnectionName = DatatypeContainer<ConnectionNameType>;
  export type QueueNameType = string;
  export type QueueName = DatatypeContainer<QueueNameType>;

  export class Taxonomy {
    readonly ConnectionName: ConnectionName = buildDatatypeContainer(
      'com.orbitalhq.aws.sqs.ConnectionName',
      ''
    );
    readonly QueueName: QueueName = buildDatatypeContainer('com.orbitalhq.aws.sqs.QueueName', '');
  }
}

export namespace com.orbitalhq.azure.store {
  export type AzureStoreBlobType = string;
  export type AzureStoreBlob = DatatypeContainer<AzureStoreBlobType>;
  export type ConnectionNameType = string;
  export type ConnectionName = DatatypeContainer<ConnectionNameType>;
  export type AzureStoreContainerType = string;
  export type AzureStoreContainer = DatatypeContainer<AzureStoreContainerType>;

  export class Taxonomy {
    readonly AzureStoreBlob: AzureStoreBlob = buildDatatypeContainer(
      'com.orbitalhq.azure.store.AzureStoreBlob',
      ''
    );
    readonly ConnectionName: ConnectionName = buildDatatypeContainer(
      'com.orbitalhq.azure.store.ConnectionName',
      ''
    );
    readonly AzureStoreContainer: AzureStoreContainer = buildDatatypeContainer(
      'com.orbitalhq.azure.store.AzureStoreContainer',
      ''
    );
  }
}

export namespace com.orbitalhq.aws.lambda {
  export type ConnectionNameType = string;
  export type ConnectionName = DatatypeContainer<ConnectionNameType>;
  export type OperationNameType = string;
  export type OperationName = DatatypeContainer<OperationNameType>;

  export class Taxonomy {
    readonly ConnectionName: ConnectionName = buildDatatypeContainer(
      'com.orbitalhq.aws.lambda.ConnectionName',
      ''
    );
    readonly OperationName: OperationName = buildDatatypeContainer(
      'com.orbitalhq.aws.lambda.OperationName',
      ''
    );
  }
}

export namespace com.orbitalhq.aws.dynamo {
  export type ConnectionNameType = string;
  export type ConnectionName = DatatypeContainer<ConnectionNameType>;
  export type TableNameType = string;
  export type TableName = DatatypeContainer<TableNameType>;

  export class Taxonomy {
    readonly ConnectionName: ConnectionName = buildDatatypeContainer(
      'com.orbitalhq.aws.dynamo.ConnectionName',
      ''
    );
    readonly TableName: TableName = buildDatatypeContainer(
      'com.orbitalhq.aws.dynamo.TableName',
      ''
    );
  }
}

export namespace com.orbitalhq.formats {
  export class Taxonomy {}
}

export namespace lang.taxi.xml {
  export class Taxonomy {}
}

export namespace com.orbitalhq.http.operations {
  export type RetryTimeInSecondsType = number;
  export type RetryTimeInSeconds = DatatypeContainer<RetryTimeInSecondsType>;
  export type MaximumRetriesType = number;
  export type MaximumRetries = DatatypeContainer<MaximumRetriesType>;
  export type ExponentialBackOffJitterType = number;
  export type ExponentialBackOffJitter = DatatypeContainer<ExponentialBackOffJitterType>;
  export type ResponseCodeType = number;
  export type ResponseCode = DatatypeContainer<ResponseCodeType>;
  export type HttpStatusCodeType = string;
  export type HttpStatusCode = DatatypeContainer<HttpStatusCodeType>;

  export class Taxonomy {
    readonly RetryTimeInSeconds: RetryTimeInSeconds = buildDatatypeContainer(
      'com.orbitalhq.http.operations.RetryTimeInSeconds',
      0
    );
    readonly MaximumRetries: MaximumRetries = buildDatatypeContainer(
      'com.orbitalhq.http.operations.MaximumRetries',
      0
    );
    readonly ExponentialBackOffJitter: ExponentialBackOffJitter = buildDatatypeContainer(
      'com.orbitalhq.http.operations.ExponentialBackOffJitter',
      0.0
    );
    readonly ResponseCode: ResponseCode = buildDatatypeContainer(
      'com.orbitalhq.http.operations.ResponseCode',
      0
    );
    readonly HttpStatusCode: HttpStatusCode = buildDatatypeContainer(
      'com.orbitalhq.http.operations.HttpStatusCode',
      ''
    );
  }
}

export namespace com.orbitalhq.hazelcast {
  export type HazelcastMapNameType = string;
  export type HazelcastMapName = DatatypeContainer<HazelcastMapNameType>;

  export class Taxonomy {
    readonly HazelcastMapName: HazelcastMapName = buildDatatypeContainer(
      'com.orbitalhq.hazelcast.HazelcastMapName',
      ''
    );
  }
}

export namespace com.orbitalhq.mongo {
  export type ConnectionNameType = string;
  export type ConnectionName = DatatypeContainer<ConnectionNameType>;
  export type BatchSizeType = number;
  export type BatchSize = DatatypeContainer<BatchSizeType>;
  export type BatchDurationType = number;
  export type BatchDuration = DatatypeContainer<BatchDurationType>;
  export type CollectionNameType = string;
  export type CollectionName = DatatypeContainer<CollectionNameType>;

  export class Taxonomy {
    readonly ConnectionName: ConnectionName = buildDatatypeContainer(
      'com.orbitalhq.mongo.ConnectionName',
      ''
    );
    readonly BatchSize: BatchSize = buildDatatypeContainer('com.orbitalhq.mongo.BatchSize', 0);
    readonly BatchDuration: BatchDuration = buildDatatypeContainer(
      'com.orbitalhq.mongo.BatchDuration',
      0
    );
    readonly CollectionName: CollectionName = buildDatatypeContainer(
      'com.orbitalhq.mongo.CollectionName',
      ''
    );
  }
}

export namespace lang.taxi.formats {
  export class Taxonomy {}
}

export namespace com.orbitalhq.models {
  export class Taxonomy {}
}

export namespace com.orbitalhq.state {
  export class Taxonomy {}
}

export namespace com.orbitalhq.caching {
  export type CachePolicyType = 'Enabled' | 'Disabled';
  export type CachePolicy = DatatypeContainer<CachePolicyType | null>;
  export class Taxonomy {
    readonly CachePolicy: CachePolicy = buildDatatypeContainer(
      'com.orbitalhq.caching.CachePolicy',
      null
    );
  }
}

export namespace address.types {
  export type AddressIdType = number;
  export type AddressId = DatatypeContainer<AddressIdType>;

  export class Taxonomy {
    readonly AddressId: AddressId = buildDatatypeContainer('address.types.AddressId', 0);
  }
}

export namespace demo.netflix {
  export type NetflixFilmIdType = number;
  export type NetflixFilmId = DatatypeContainer<NetflixFilmIdType>;
  export type NetflixAnnouncementType = string;
  export type NetflixAnnouncement = DatatypeContainer<NetflixAnnouncementType>;
  export type NewFilmReleaseAnnouncement = DatatypeContainer<{
    readonly filmId?: demo.netflix.NetflixFilmIdType;

    readonly announcement?: demo.netflix.NetflixAnnouncementType;
  }>;

  export class Taxonomy {
    readonly NetflixFilmId: NetflixFilmId = buildDatatypeContainer('demo.netflix.NetflixFilmId', 0);
    readonly NetflixAnnouncement: NetflixAnnouncement = buildDatatypeContainer(
      'demo.netflix.NetflixAnnouncement',
      ''
    );
    readonly NewFilmReleaseAnnouncement: NewFilmReleaseAnnouncement = buildDatatypeContainer(
      'demo.netflix.NewFilmReleaseAnnouncement',
      {
        filmId: 0,
        announcement: '',
      }
    );
  }
}

export namespace film {
  // This is a film
  export type Film = DatatypeContainer<{
    readonly film_id: films.FilmIdType;

    readonly title: film.types.TitleType;

    // What a film marketing person has described this film as. In space, no one hears you scream.
    readonly description?: film.types.DescriptionType;

    readonly release_year?: film.types.ReleaseYearType;

    readonly language_id: language.types.LanguageIdType;

    readonly original_language_id?: language.types.OriginalLanguageIdType;

    readonly rental_duration: film.types.RentalDurationType;

    readonly rental_rate: film.types.RentalRateType;

    readonly length?: film.types.LengthType;

    readonly replacement_cost: film.types.ReplacementCostType;

    readonly rating?: film.types.RatingType;

    readonly last_update: film.types.LastUpdateType;

    readonly special_features?: film.types.SpecialFeatures[];

    readonly fulltext: film.types.FulltextType;
  }>;

  export class Taxonomy {
    readonly Film: Film = buildDatatypeContainer('film.Film', {
      film_id: 0,
      title: '',
      description: '',
      release_year: 0,
      language_id: 0,
      original_language_id: 0,
      rental_duration: 0,
      rental_rate: 0.0,
      length: 0,
      replacement_cost: 0.0,
      rating: '',
      last_update: new Date(),
      special_features: [],
      fulltext: '',
    });
  }
}

export namespace film.types {
  // The description of the film
  export type DescriptionType = string;
  export type Description = DatatypeContainer<DescriptionType>;
  export type FulltextType = string;
  export type Fulltext = DatatypeContainer<FulltextType>;
  export type LastUpdateType = Date;
  export type LastUpdate = DatatypeContainer<LastUpdateType>;
  export type LengthType = number;
  export type Length = DatatypeContainer<LengthType>;
  export type RatingType = string;
  export type Rating = DatatypeContainer<RatingType>;
  export type ReleaseYearType = number;
  export type ReleaseYear = DatatypeContainer<ReleaseYearType>;
  export type RentalDurationType = number;
  export type RentalDuration = DatatypeContainer<RentalDurationType>;
  export type RentalRateType = number;
  export type RentalRate = DatatypeContainer<RentalRateType>;
  export type ReplacementCostType = number;
  export type ReplacementCost = DatatypeContainer<ReplacementCostType>;
  export type SpecialFeaturesType = string;
  export type SpecialFeatures = DatatypeContainer<SpecialFeaturesType>;
  // The title of the film
  export type TitleType = string;
  export type Title = DatatypeContainer<TitleType>;

  export class Taxonomy {
    readonly Description: Description = buildDatatypeContainer('film.types.Description', '');
    readonly Fulltext: Fulltext = buildDatatypeContainer('film.types.Fulltext', '');
    readonly LastUpdate: LastUpdate = buildDatatypeContainer('film.types.LastUpdate', new Date());
    readonly Length: Length = buildDatatypeContainer('film.types.Length', 0);
    readonly Rating: Rating = buildDatatypeContainer('film.types.Rating', '');
    readonly ReleaseYear: ReleaseYear = buildDatatypeContainer('film.types.ReleaseYear', 0);
    readonly RentalDuration: RentalDuration = buildDatatypeContainer(
      'film.types.RentalDuration',
      0
    );
    readonly RentalRate: RentalRate = buildDatatypeContainer('film.types.RentalRate', 0.0);
    readonly ReplacementCost: ReplacementCost = buildDatatypeContainer(
      'film.types.ReplacementCost',
      0.0
    );
    readonly SpecialFeatures: SpecialFeatures = buildDatatypeContainer(
      'film.types.SpecialFeatures',
      ''
    );
    readonly Title: Title = buildDatatypeContainer('film.types.Title', '');
  }
}

export namespace films {
  export type FilmIdType = number;
  export type FilmId = DatatypeContainer<FilmIdType>;

  export class Taxonomy {
    readonly FilmId: FilmId = buildDatatypeContainer('films.FilmId', 0);
  }
}

export namespace io.vyne.films.providers {
  export type PricerPerMonthType = number;
  export type PricerPerMonth = DatatypeContainer<PricerPerMonthType>;
  export type StreamingProviderNameType = string;
  export type StreamingProviderName = DatatypeContainer<StreamingProviderNameType>;

  export class Taxonomy {
    readonly PricerPerMonth: PricerPerMonth = buildDatatypeContainer(
      'io.vyne.films.providers.PricerPerMonth',
      0
    );
    readonly StreamingProviderName: StreamingProviderName = buildDatatypeContainer(
      'io.vyne.films.providers.StreamingProviderName',
      ''
    );
  }
}

export namespace io.vyne.films {
  export type StreamingProvider = DatatypeContainer<{
    readonly name?: io.vyne.films.providers.StreamingProviderNameType;

    readonly pricePerMonth?: io.vyne.films.providers.PricerPerMonthType;
  }>;

  export class Taxonomy {
    readonly StreamingProvider: StreamingProvider = buildDatatypeContainer(
      'io.vyne.films.StreamingProvider',
      {
        name: '',
        pricePerMonth: 0,
      }
    );
  }
}

export namespace language.types {
  export type LanguageIdType = number;
  export type LanguageId = DatatypeContainer<LanguageIdType>;
  export type OriginalLanguageIdType = number;
  export type OriginalLanguageId = DatatypeContainer<OriginalLanguageIdType>;

  export class Taxonomy {
    readonly LanguageId: LanguageId = buildDatatypeContainer('language.types.LanguageId', 0);
    readonly OriginalLanguageId: OriginalLanguageId = buildDatatypeContainer(
      'language.types.OriginalLanguageId',
      0
    );
  }
}

export namespace films.reviews {
  export type SquashedTomatoesFilmIdType = string;
  export type SquashedTomatoesFilmId = DatatypeContainer<SquashedTomatoesFilmIdType>;
  // A score indicating how good the movie is.  Higher scores are better
  export type FilmReviewScoreType = number;
  export type FilmReviewScore = DatatypeContainer<FilmReviewScoreType>;
  // The text of a film review
  export type ReviewTextType = string;
  export type ReviewText = DatatypeContainer<ReviewTextType>;
  export type FilmReview = DatatypeContainer<{
    readonly filmId: films.reviews.SquashedTomatoesFilmIdType;

    readonly score: films.reviews.FilmReviewScoreType;

    readonly filmReview: films.reviews.ReviewTextType;
  }>;
  export type IdResolution = DatatypeContainer<{
    readonly filmId: films.FilmIdType;

    readonly netflixId: demo.netflix.NetflixFilmIdType;

    readonly squashedTomatoesFilmId: films.reviews.SquashedTomatoesFilmIdType;
  }>;

  export class Taxonomy {
    readonly SquashedTomatoesFilmId: SquashedTomatoesFilmId = buildDatatypeContainer(
      'films.reviews.SquashedTomatoesFilmId',
      ''
    );
    readonly FilmReviewScore: FilmReviewScore = buildDatatypeContainer(
      'films.reviews.FilmReviewScore',
      0.0
    );
    readonly ReviewText: ReviewText = buildDatatypeContainer('films.reviews.ReviewText', '');
    readonly FilmReview: FilmReview = buildDatatypeContainer('films.reviews.FilmReview', {
      filmId: '',
      score: 0.0,
      filmReview: '',
    });
    readonly IdResolution: IdResolution = buildDatatypeContainer('films.reviews.IdResolution', {
      filmId: 0,
      netflixId: 0,
      squashedTomatoesFilmId: '',
    });
  }
}

export namespace staff.types {
  export type StaffIdType = number;
  export type StaffId = DatatypeContainer<StaffIdType>;

  export class Taxonomy {
    readonly StaffId: StaffId = buildDatatypeContainer('staff.types.StaffId', 0);
  }
}
export const taxonomy = {
  taxi: {
    http: {
      ...new taxi.http.Taxonomy(),
    },
  },
  com: {
    orbitalhq: {
      auth: {
        ...new com.orbitalhq.auth.Taxonomy(),
      },
      errors: {
        ...new com.orbitalhq.errors.Taxonomy(),
      },
      jdbc: {
        ...new com.orbitalhq.jdbc.Taxonomy(),
      },
      kafka: {
        ...new com.orbitalhq.kafka.Taxonomy(),
      },
      catalog: {
        ...new com.orbitalhq.catalog.Taxonomy(),
      },
      aws: {
        s3: {
          ...new com.orbitalhq.aws.s3.Taxonomy(),
        },
        sqs: {
          ...new com.orbitalhq.aws.sqs.Taxonomy(),
        },
        lambda: {
          ...new com.orbitalhq.aws.lambda.Taxonomy(),
        },
        dynamo: {
          ...new com.orbitalhq.aws.dynamo.Taxonomy(),
        },
      },
      azure: {
        store: {
          ...new com.orbitalhq.azure.store.Taxonomy(),
        },
      },
      formats: {
        ...new com.orbitalhq.formats.Taxonomy(),
      },
      http: {
        operations: {
          ...new com.orbitalhq.http.operations.Taxonomy(),
        },
      },
      hazelcast: {
        ...new com.orbitalhq.hazelcast.Taxonomy(),
      },
      mongo: {
        ...new com.orbitalhq.mongo.Taxonomy(),
      },
      models: {
        ...new com.orbitalhq.models.Taxonomy(),
      },
      state: {
        ...new com.orbitalhq.state.Taxonomy(),
      },
      caching: {
        ...new com.orbitalhq.caching.Taxonomy(),
      },
      ...new com.orbitalhq.Taxonomy(),
    },
  },
  vyne: {
    vyneQl: {
      ...new vyne.vyneQl.Taxonomy(),
    },
  },
  lang: {
    taxi: {
      xml: {
        ...new lang.taxi.xml.Taxonomy(),
      },
      formats: {
        ...new lang.taxi.formats.Taxonomy(),
      },
    },
  },
  address: {
    types: {
      ...new address.types.Taxonomy(),
    },
  },
  demo: {
    netflix: {
      ...new demo.netflix.Taxonomy(),
    },
  },
  film: {
    types: {
      ...new film.types.Taxonomy(),
    },
    ...new film.Taxonomy(),
  },
  films: {
    reviews: {
      ...new films.reviews.Taxonomy(),
    },
    ...new films.Taxonomy(),
  },
  io: {
    vyne: {
      films: {
        providers: {
          ...new io.vyne.films.providers.Taxonomy(),
        },
        ...new io.vyne.films.Taxonomy(),
      },
    },
  },
  language: {
    types: {
      ...new language.types.Taxonomy(),
    },
  },
  staff: {
    types: {
      ...new staff.types.Taxonomy(),
    },
  },
};
